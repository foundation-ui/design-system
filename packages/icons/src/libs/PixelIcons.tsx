/* Auto-generated by: https://github.com/foundation-ui/cli */

import React, { SVGProps } from "react";
import Icon from "./Icon";

export const PixelIcon = ({
  children,
  ...restProps
}: React.ComponentProps<"svg">) => {
  return <Icon {...restProps}>{children}</Icon>;
};
PixelIcon.displayName = "PixelIcon";

const LayoutHeader = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2 19H22V5H2V19ZM4 17V11H20V17H4ZM20 9H4V7H20V9Z"
    />
  </React.Fragment>
);
LayoutHeader.displayName = "Icon.LayoutHeader";

const Search = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6 2H14V4H6V2ZM4 6V4H6V6H4ZM4 14H2V6H4V14ZM6 16H4V14H6V16ZM14 16V18H6V16H14ZM16 14H14V16H16V18H18V20H20V22H22V20H20V18H18V16H16V14ZM16 6H18V14H16V6ZM16 6V4H14V6H16Z"
    />
  </React.Fragment>
);
Search.displayName = "Icon.Search";

const ArrowDown = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11 4H13V16H15V18H13V20H11V18H9V16H11V4ZM7 14V16H9V14H7ZM7 14V12H5V14H7ZM17 14V16H15V14H17ZM17 14V12H19V14H17Z"
    />
  </React.Fragment>
);
ArrowDown.displayName = "Icon.ArrowDown";

const List = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6 6H4V8H6V6ZM20 6H8V8H20V6ZM4 11H6V13H4V11ZM20 11H8V13H20V11ZM4 16H6V18H4V16ZM20 16H8V18H20V16Z"
    />
  </React.Fragment>
);
List.displayName = "Icon.List";

const Debug = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path fillRule="evenodd" clipRule="evenodd" d="M6 2H8V4H6V2Z" />
    <path fillRule="evenodd" clipRule="evenodd" d="M10 11H14V13H10V11Z" />
    <path fillRule="evenodd" clipRule="evenodd" d="M14 15H10V17H14V15Z" />
    <path d="M16 4H14V6H10V4H8V6H6V9H4V7H2V9H4V11H6V13H2V15H6V17H4V19H2V21H4V19H6V22H18V19H20V21H22V19H20V17H18V15H22V13H18V11H20V9H22V7H20V9H18V6H16V4ZM8 20V8H16V20H8Z" />
    <path fillRule="evenodd" clipRule="evenodd" d="M16 4V2H18V4H16Z" />
  </React.Fragment>
);
Debug.displayName = "Icon.Debug";

const Downasaur = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6 4H20V6H22V8V10V12H14V14H20V16H16V18H14V20H2V18V16V14V12V10V8H4V6H6V4ZM8 10H10V8H8V10Z"
    />
  </React.Fragment>
);
Downasaur.displayName = "Icon.Downasaur";

const CornerUpRight = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6 8H16V6H18V8H20V10H18V12H16V10H6V20H4V10V8H6ZM16 12V14H14V12H16ZM16 6V4H14V6H16Z"
    />
  </React.Fragment>
);
CornerUpRight.displayName = "Icon.CornerUpRight";

const Hourglass = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M18 2H6V4V8H8V10H10V12V14H8V16H6V20V22H18V20V16H16V14H14V12V10H16V8H18V4V2ZM16 8H14V10H10V8H8V4H16V8ZM14 14V16H16V20H8V16H10V14H14Z"
    />
  </React.Fragment>
);
Hourglass.displayName = "Icon.Hourglass";

const User = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M15 2H9V3.99994H7.00024V9.99994H9.00024V4H15V2ZM15 10H9V12H15V10ZM15.0002 3.99994H17.0002V9.99994H15.0002V3.99994ZM4 15.9999H6V14H18V16H6V20H18.0002V15.9999H20.0002V21.9999H20V22H4V21.9999V20V15.9999Z"
    />
  </React.Fragment>
);
User.displayName = "Icon.User";

const Alert = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M13 1H11V3H9V5H7V7H5V9H3V11H1V13H3V15H5V17H7V19H9V21H11V23H13V21H15V19H17V17H19V15H21V13H23V11H21V9H19V7H17V5H15V3H13V1ZM13 3V5H15V7H17V9H19V11H21V13H19V15H17V17H15V19H13V21H11V19H9V17H7V15H5V13H3V11H5V9H7V7H9V5H11V3H13ZM13 7H11V13H13V7ZM13 15H11V17H13V15Z"
    />
  </React.Fragment>
);
Alert.displayName = "Icon.Alert";

const Sliders = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M17 4H19V14H17V4ZM17 16H15V18H17V20H19V18H21V16H19H17ZM13 10H11V20H13V10ZM5 12H3V14H5V20H7V14H9V12H7H5ZM13 4H11V6H9V8H11H13H15V6H13V4ZM5 4H7V10H5V4Z"
    />
  </React.Fragment>
);
Sliders.displayName = "Icon.Sliders";

const ChevronDown = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M7 8H5V10H7V12H9V14H11V16H13V14H15V12H17V10H19V8H17V10H15V12H13V14H11V12H9V10H7V8Z"
    />
  </React.Fragment>
);
ChevronDown.displayName = "Icon.ChevronDown";

const Logout = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M5 3H19H21V5V7H19V5H5V19H19V17H21V19V21H19H5H3V19V5V3H5ZM21 11H19V9H17V7H15V9H17V11H7V13L17 13V15H15V17H17V15H19V13L21 13V11Z"
    />
  </React.Fragment>
);
Logout.displayName = "Icon.Logout";

const Crop = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 2H6V6H2V8H6H8H16V16V18V22H18V18H22V16H18V8V6H16H8V2ZM8 10H6V16V18H8H14V16H8V10Z"
    />
  </React.Fragment>
);
Crop.displayName = "Icon.Crop";

const DropFull = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11 2H13V4H15V8H17V12H19V18H17V20H15V22H9V20H7V18H5V12H7V8H9V4H11V2Z"
    />
  </React.Fragment>
);
DropFull.displayName = "Icon.DropFull";

const Map = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 2H10V4H12V6H10V16H8V6H6V4H8V2ZM4 8V6H6V8H4ZM6 18V20H4V22H2V8H4V18H6ZM6 18H8V16H6V18ZM12 18H10V16H12V18ZM14 8V6H12V8H14ZM16 8H14V18H12V20H14V22H16V20H18V18H20V16H22V4V2H20V4H18V6H16V8ZM16 8H18V6H20V16H18V18H16V8Z"
    />
  </React.Fragment>
);
Map.displayName = "Icon.Map";

const File = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M3 22H21V8H19V6H17V8H15V6H17V4H15V2H3V22ZM5 20V4H13V10H19V20H5Z"
    />
  </React.Fragment>
);
File.displayName = "Icon.File";

const Duplicate = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M4.99976 2.99997H14.9999H16.9998H16.9999V6.99998H18.9998H20.9996H20.9998V21H20.9996V21H6.99963V21V19V17.0001H2.99976V17V15.0001V4.99997V2.99997H4.99976ZM14.9999 6.99998V4.99997H4.99976V15.0001H6.99963V8.99999V6.99998H8.99963H14.9999ZM8.99963 17.0001V19H18.9998V8.99999H8.99963V15.0001H8.99976V17.0001H8.99963Z"
    />
  </React.Fragment>
);
Duplicate.displayName = "Icon.Duplicate";

const SunAlt = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <g clip-path="url(#clip0_0_586)">
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M13 0H11V4H13V0ZM0 11V13H4V11H0ZM24 11V13H20V11H24ZM13 24H11V20H13V24ZM8 6H16V8H8V6ZM6 8H8V16H6V8ZM8 18V16H16V18H8ZM18 16H16V8H18V16ZM20 2H22V4H20V2ZM20 4V6H18V4H20ZM22 22H20V20H22V22ZM20 20H18V18H20V20ZM4 2H2V4H4V6H6V4H4V2ZM2 22H4V20H6V18H4V20H2V22Z"
      />
    </g>
    <defs>
      <clipPath id="clip0_0_586">
        <rect width="24" height="24" />
      </clipPath>
    </defs>
  </React.Fragment>
);
SunAlt.displayName = "Icon.SunAlt";

const LayoutFooter = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2 5H22V19H2V5ZM4 7V13H20V7H4ZM20 15H4V17H20V15Z"
    />
  </React.Fragment>
);
LayoutFooter.displayName = "Icon.LayoutFooter";

const Pixelarticons = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M3 3V21H5H19H21V3H19H5H3ZM19 5V19H5V5H19ZM7 7H13V9V11V13H9V15H7V13V11V9V7ZM15 13H13L13 15H11V17H13V15H15V17H17V15H15V13ZM15 13H17V11H15V13ZM9 9V11H11V9H9Z"
    />
  </React.Fragment>
);
Pixelarticons.displayName = "Icon.Pixelarticons";

const Contrast = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M17 3H7V5H5V7H3V17H5V19H7V21H17V19H19V17H21V7H19V5H17V3ZM7 19V17H5V7H7V5H12V19H7Z"
    />
  </React.Fragment>
);
Contrast.displayName = "Icon.Contrast";

const EditBox = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M18 1.99998H16V3.99998H18V1.99998ZM3.99988 4H9.99988V6H3.99988V20H17.9999V14H19.9999V22H19.9999V22H1.99988V22V20V6V4H3.99988ZM8.00006 11.9999H6.00006V16V17.9999V18H12.0001V16L13.9999 16V14H11.9999V16L8.00006 16V11.9999ZM11.9999 10H10V11.9999H8V9.99992H9.99994V8H11.9999V6H13.9999V8H11.9999V10ZM14.0001 4H16.0001V6H14.0001V4ZM17.9999 4H19.9999V6H21.9999V8H19.9999V10H18V11.9999H16V9.99992H17.9999V8H19.9999V6H17.9999V4ZM14.0001 11.9999H16.0001V13.9999H14.0001V11.9999Z"
    />
  </React.Fragment>
);
EditBox.displayName = "Icon.EditBox";

const Move = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <g clip-path="url(#clip0_0_1428)">
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M13 0H11V2H9V4H7V6H9V4H11V11H4V9H6V7H4V9H2V11H0V13H2V15H4V17H6V15H4V13H11V20H9V18H7V20H9V22H11V24H13V22H15V20H17V18H15V20H13V13H20V15H18V17H20V15H22V13H24V11H22V9H20V7H18V9H20V11H13V4H15V6H17V4H15V2H13V0Z"
      />
    </g>
    <defs>
      <clipPath id="clip0_0_1428">
        <rect width="24" height="24" />
      </clipPath>
    </defs>
  </React.Fragment>
);
Move.displayName = "Icon.Move";

const ChevronUp = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M7 16H5V14H7V12H9V10H11V8H13V10H15V12H17V14H19V16H17V14H15V12H13V10H11V12H9V14H7V16Z"
    />
  </React.Fragment>
);
ChevronUp.displayName = "Icon.ChevronUp";

const SlidersVertical = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M4 4H10V7H22V9H10V12H4V9H2V7H4V4ZM6 6V10H8V6H6ZM14 12H20V15H22V17H20V20H14V17H2V15H14V12ZM16 14V18H18V14H16Z"
    />
  </React.Fragment>
);
SlidersVertical.displayName = "Icon.SlidersVertical";

const EyeClosed = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M0 7H2V9H0V7ZM4 11H2V9H4V11ZM8 13V11H4V13H2V15H4V13H8ZM16 13H8V15H6V17H8V15H16V17H18V15H16V13ZM20 11H16V13H20V15H22V13H20V11ZM22 9V11H20V9H22ZM22 9V7H24V9H22Z"
    />
  </React.Fragment>
);
EyeClosed.displayName = "Icon.EyeClosed";

const Lock = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M15 2H9V4H7V8H6H4V10V20V22H6H18H20V20V10V8H18H17V4H15V2ZM15 4V8H9V4H15ZM9 10H15H17H18V20H6V10H7H9ZM13 13H11V17H13V13Z"
    />
  </React.Fragment>
);
Lock.displayName = "Icon.Lock";

const ChevronRight = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 5L8 7L10 7L10 5L8 5ZM12 9L12 7L10 7L10 9L12 9ZM14 11L14 9L12 9L12 11L14 11ZM14 13L16 13L16 11L14 11L14 13ZM12 15L12 13L14 13L14 15L12 15ZM12 15L10 15L10 17L12 17L12 15ZM8 19L8 17L10 17L10 19L8 19Z"
    />
  </React.Fragment>
);
ChevronRight.displayName = "Icon.ChevronRight";

const Clipboard = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10 2H14H16V4H18H20V20V22H18H6H4V20V4H6H8V2H10ZM16 6V8H14H10H8V6H6V20H18V6H16ZM14 6V4H10V6H14Z"
    />
  </React.Fragment>
);
Clipboard.displayName = "Icon.Clipboard";

const Link = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M4 6H11V8H4V16H11V18H4H2V16V8V6H4ZM20 6H13V8H20V16H13V18H20H22V16V8V6H20ZM17 11H7V13H17V11Z"
    />
  </React.Fragment>
);
Link.displayName = "Icon.Link";

const ChevronsHorizontal = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 9V7H10V9H8ZM6 11L6 9H8V11H6ZM6 13H4V11H6V13ZM8 15V13H6V15H8ZM8 15H10V17H8V15ZM16 9V7H14V9L16 9ZM18 11V9H16V11H18ZM18 13V11H20V13H18ZM16 15V13H18V15H16ZM16 15V17H14V15H16Z"
    />
  </React.Fragment>
);
ChevronsHorizontal.displayName = "Icon.ChevronsHorizontal";

const CornerDownRight = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6 16H16V18H18V16H20V14H18V12H16V14H6V4H4V14V16H6ZM16 12V10H14V12H16ZM16 18V20H14V18H16Z"
    />
  </React.Fragment>
);
CornerDownRight.displayName = "Icon.CornerDownRight";

const ArrowRight = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M4 11L4 13L16 13L16 15L18 15L18 13L20 13L20 11L18 11L18 9L16 9L16 11L4 11ZM14 7L16 7L16 9L14 9L14 7ZM14 7L12 7L12 5L14 5L14 7ZM14 17L16 17L16 15L14 15L14 17ZM14 17L12 17L12 19L14 19L14 17Z"
    />
  </React.Fragment>
);
ArrowRight.displayName = "Icon.ArrowRight";

const AspectRatio = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2 4H4H20H22V20H20H4H2V4ZM4 18H20V6H4V18ZM8 8H10V10H8V12H6V8H8ZM16 16H14V14H16V12H18V16H16Z"
    />
  </React.Fragment>
);
AspectRatio.displayName = "Icon.AspectRatio";

const ChevronsVertical = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11 4H13V6H11V4ZM9 8V6H11V8H9ZM9 8V10H7V8H9ZM15 8H13V6H15V8ZM15 8H17V10H15V8ZM9 16H7V14H9V16ZM11 18H9V16H11V18ZM13 18V20H11V18H13ZM15 16H13V18H15V16ZM15 16V14H17V16H15Z"
    />
  </React.Fragment>
);
ChevronsVertical.displayName = "Icon.ChevronsVertical";

const Download = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M12.9998 17.0001L12.9998 3.00006H10.9998L10.9998 13H9.00006V11H7.00006V13H8.99994V15H10.9998V17.0001H12.9998ZM20.9998 19V15H18.9998V19L4.99982 19L4.99982 15H2.99982V19V21V21L4.99982 21V21L18.9998 21V21L20.9998 21V21V19ZM13 13V15H15V13H17V11H15V13H13Z"
    />
  </React.Fragment>
);
Download.displayName = "Icon.Download";

const HumanRun = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10 3H8V5H6V7H8V5H10V7H12V9H10V11H8V13H6V15H4V13H2V15H4V17H6V15H8H10V17H12V19H10V21H12V19H14V17H12V15V13H14V11H16V13H18V15H20V13H22V11H20V13H18V11H16V9H18V5H14V7H12V5H10V3Z"
    />
  </React.Fragment>
);
HumanRun.displayName = "Icon.HumanRun";

const Expand = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11 5H13V7H15V9H17V7H15V5H13V3H11V5ZM9 7V5H11V7H9ZM9 7V9H7V7H9ZM4 13H20V11H4V13ZM13 19H11V17H9V15H7V17H9V19H11V21H13V19ZM15 17H13V19H15V17ZM15 17H17V15H15V17Z"
    />
  </React.Fragment>
);
Expand.displayName = "Icon.Expand";

const Note = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M3 2H21V16H19V18H17V16H15V18H17V20H15V22H3V2ZM5 4V20H13V14H19V4H5Z"
    />
  </React.Fragment>
);
Note.displayName = "Icon.Note";

const BookOpen = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M3 3H11V5H3V17H11V5H13V17H21V5H13V3H21H23V5V17V19H21H13V21H11V19H3H1V17V5V3H3ZM19 10H15V12H19V10ZM15 7H19V9H15V7ZM17 13H15V15H17V13Z"
    />
  </React.Fragment>
);
BookOpen.displayName = "Icon.BookOpen";

const Login = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M5 3H3V5V7H5V5H19V19H5V17H3V19V21H5H19H21V19V5V3H19H5ZM17 11H15V9H13V7H11V9H13V11H3V13L13 13V15H11V17H13V15H15V13L17 13V11Z"
    />
  </React.Fragment>
);
Login.displayName = "Icon.Login";

const Collapse = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M17 3H15V5H13V7H11V5H9V3H7V5H9V7H11V9H13V7H15V5H17V3ZM4 13H20V11H4V13ZM13 17H11V15H13V17ZM15 19H13V17H15V19ZM15 19H17V21H15V19ZM9 19H11V17H9V19ZM9 19H7V21H9V19Z"
    />
  </React.Fragment>
);
Collapse.displayName = "Icon.Collapse";

const Flag = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M3 2H13V4H21V18H11V16H5V22H3V2ZM5 14H13V16H19V6H11V4H5V14Z"
    />
  </React.Fragment>
);
Flag.displayName = "Icon.Flag";

const Gps = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M13 2V6H18V11H22V13H18V18H13V22H11V18H6V13H2V11H6V6H11V2H13ZM8 8V16H16V8H8ZM10 10H14V14H10V10Z"
    />
  </React.Fragment>
);
Gps.displayName = "Icon.Gps";

const SpeedMedium = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M13 5H11V13H10V17H14V13H13V5ZM9 7H5V9H3V11H1V17H3V19H5V17H3V11H5V9H9V7ZM21 11H23V17H21V11ZM19 9H21V11H19V9ZM19 9H15V7H19V9ZM21 17V19H19V17H21Z"
    />
  </React.Fragment>
);
SpeedMedium.displayName = "Icon.SpeedMedium";

const Plus = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11 4H13V6V11H20V13H13V18V20H11V18V13H4V11H11V6V4Z"
    />
  </React.Fragment>
);
Plus.displayName = "Icon.Plus";

const Check = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M18 6H20V8H18V6ZM16 10V8H18V10H16ZM14 12V10H16V12H14ZM12 14H14V12H12V14ZM10 16H12V14H10V16ZM8 16V18H10V16H8ZM6 14H8V16H6V14ZM6 14H4V12H6V14Z"
    />
  </React.Fragment>
);
Check.displayName = "Icon.Check";

const CornerUpLeft = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M18 8H8V6H6V8H4V10H6V12H8V10H18V20H20V10V8H18ZM8 12V14H10V12H8ZM8 6V4H10V6H8Z"
    />
  </React.Fragment>
);
CornerUpLeft.displayName = "Icon.CornerUpLeft";

const Scale = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M21.0001 3H21H19.0001H13V5L17.0001 5V7H19.0001V11H21.0001V3ZM16.9999 7H14.9999V9L13 9V11H15V9L16.9999 9V7ZM9.00012 15H11.0001V13H9.00006V15H7.00012V17H9.00012V15ZM5 13V17H6.99988V19H5V19H11.0001V21H5H3.00006H3V13H5Z"
    />
  </React.Fragment>
);
Scale.displayName = "Icon.Scale";

const Close = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M5 5H7V7H5V5ZM9 9H7V7H9V9ZM11 11H9V9H11V11ZM13 11H11V13H9V15H7V17H5V19H7V17H9V15H11V13H13V15H15V17H17V19H19V17H17V15H15V13H13V11ZM15 9V11H13V9H15ZM17 7V9H15V7H17ZM17 7V5H19V7H17Z"
    />
  </React.Fragment>
);
Close.displayName = "Icon.Close";

const Reload = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16 2H14V4H16V6H4V8H2V13H4V8H16V10H14V12H16V10H18V8H20V6H18V4H16V2ZM6 20H8V22H10V20H8V18H20V16H22V11H20V16H8V14H10V12H8V14H6V16H4V18H6V20Z"
    />
  </React.Fragment>
);
Reload.displayName = "Icon.Reload";

const MissedCall = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M20 6H16V8H18V10H16V12H14V14H12V16H10V14H8V12H6V10H4V8H2V10H4V12H6V14H8V16H10V18H12V16H14V14H16V12H18V10H20V12H22V8V6H20Z"
    />
  </React.Fragment>
);
MissedCall.displayName = "Icon.MissedCall";

const Message = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M20 2H4H2H2V4H2V22H4V4H20V16H6V18H4.00025V20H6.00024V18H20H22V16V4V2H20Z"
    />
  </React.Fragment>
);
Message.displayName = "Icon.Message";

const DebugOff = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16 2H18V4H16V2ZM20 9H18V8V6H16V4H14V6H12V8H16V9V11V13H18V15H22V13H18V11H20V9ZM20 9V7H22V9H20ZM8 20V19V17V15V13V11H6V9H4V7H2V9H4V11H6V13H2V15H6V17H4V19H2V21H4V19H6V20V22H8H16V20H8ZM10 15H12V17H10V15ZM2 2H4V4H2V2ZM6 6H4V4H6V6ZM8 8H6V6H8V8ZM10 10H8V8H10V10ZM10 10V12H12V14H14V16H16V18H18V20H20V22H22V20H20V18H18V16H16V14H14V12H12V10H10Z"
    />
  </React.Fragment>
);
DebugOff.displayName = "Icon.DebugOff";

const Redo = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16 4H14V6H16V8H6V10H4V18H6V20H12V18H6V10H16V12H14V14H16V12H18V10H20V8H18V6H16V4Z"
    />
  </React.Fragment>
);
Redo.displayName = "Icon.Redo";

const HumanHandsdown = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10 2H14V6H10V2ZM7 7H17V9H15V16V22H13V16H11V22H9V16V9H7V7ZM5 11H7V9H5V11ZM5 11V13H3V11H5ZM19 11H17V9H19V11ZM19 11H21V13H19V11Z"
    />
  </React.Fragment>
);
HumanHandsdown.displayName = "Icon.HumanHandsdown";

const LayoutSidebarRight = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M22 5H2V19H22V5ZM20 7V17H18V7H20ZM16 7V17H4V7H16Z"
    />
  </React.Fragment>
);
LayoutSidebarRight.displayName = "Icon.LayoutSidebarRight";

const Trending = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M3 4H5V18H21V20H5H3V18V4ZM9 14H7V16H9V14ZM11 12V14H9V12H11ZM13 12V10H11V12H13ZM15 12H13V14H15V12ZM17 10H15V12H17V10ZM19 8V10H17V8H19ZM19 8V6H21V8H19Z"
    />
  </React.Fragment>
);
Trending.displayName = "Icon.Trending";

const Open = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M5 3.00006H11V5.00006H5V19H19V13.0001H21L21 19V21L21 21.0001H19V21H5V21.0001H3V21V19V5.00006V3.00006H5ZM13.0002 3.00006H19H21H21.0002V5.00006H21V11.0001H19V7.00006H17V5.00006L13.0002 5.00006V3.00006ZM13 11.0001H11V13.0001H9V15.0001H11V13.0001H13V11.0001ZM17.0001 7.00009H15.0001V9.00009L13.0001 9.00009V11.0001H15.0001L15.0001 9.00009H17.0001V7.00009Z"
    />
  </React.Fragment>
);
Open.displayName = "Icon.Open";

const Dashbaord = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M3 3H11V13H3V3ZM5 5V11H9V5H5ZM13 3H21V9H13V3ZM15 5V7H19V5H15ZM13 11H21V21H13V11ZM15 13V19H19V13H15ZM3 15H11V21H3V15ZM5 17V19H9V17H5Z"
    />
  </React.Fragment>
);
Dashbaord.displayName = "Icon.Dashbaord";

const LabelAlt = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16 5H2V7V17V19H16V17H18V15H20V13H22V11H20V9H18V7H16V5ZM16 7V9H18V11H20V13H18V15H16V17H4V7H16Z"
    />
  </React.Fragment>
);
LabelAlt.displayName = "Icon.LabelAlt";

const Delete = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M21 5H7V7H5V9H3V11H1V13H3V15H5V17H7V19H21H23V17V7V5H21ZM7 17V15H5V13H3V11H5V9H7V7H21V17H7ZM15 11H13V9H11V11H13V13H11V15H13V13H15V15H17V13H15V11ZM15 11V9H17V11H15Z"
    />
  </React.Fragment>
);
Delete.displayName = "Icon.Delete";

const Clock = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M19 3H5V5H3V19H5V21H19V19H21V5H19V3ZM19 5V19H5V5H19ZM11 7H13V13H17V15L13 15H11V7Z"
    />
  </React.Fragment>
);
Clock.displayName = "Icon.Clock";

const Human = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10 2H14V6H10V2ZM3 7H21V9H15V16V22H13V16H11V22H9V16V9H3V7Z"
    />
  </React.Fragment>
);
Human.displayName = "Icon.Human";

const Sync = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M4 9L4 7L16 7L16 5L18 5L18 7L20 7L20 9L18 9L18 11L16 11L16 9L4 9ZM16 11L14 11L14 13L16 13L16 11ZM16 5L14 5L14 3L16 3L16 5ZM20 17L20 15L8 15L8 13L10 13L10 11L8 11L8 13L6 13L6 15L4 15L4 17L6 17L6 19L8 19L8 21L10 21L10 19L8 19L8 17L20 17Z"
    />
  </React.Fragment>
);
Sync.displayName = "Icon.Sync";

const Eye = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 6H16V8H8V6ZM4 10V8H8V10H4ZM2 12V10H4V12H2ZM2 14V12H0V14H2ZM4 16H2V14H4V16ZM8 18H4V16H8V18ZM16 18V20H8V18H16ZM20 16V18H16V16H20ZM22 14V16H20V14H22ZM22 12H24V14H22V12ZM20 10H22V12H20V10ZM20 10V8H16V10H20ZM10 11H14V15H10V11Z"
    />
  </React.Fragment>
);
Eye.displayName = "Icon.Eye";

const ExternalLink = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M21 11V5V3H19H13V5H17V7H15V9H13V11H11V13H9V15H11V13H13V11H15V9H17V7H19V11H21ZM11 5H5H3V7V19V21H5H17H19V19V13H17V19H5V7H11V5Z"
    />
  </React.Fragment>
);
ExternalLink.displayName = "Icon.ExternalLink";

const Zap = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M12 1H14V9H22V11V13H20V11H14H12V9V5H10V3H12V1ZM8 7V5H10V7H8ZM6 9V7H8V9H6ZM4 11V9H6V11H4ZM14 19V21H12V23H10V15H2V13V11H4V13H10H12V15V19H14ZM16 17V19H14V17H16ZM18 15V17H16V15H18ZM18 15H20V13H18V15Z"
    />
  </React.Fragment>
);
Zap.displayName = "Icon.Zap";

const ArrowUp = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11 20H13V8H15V6H13V4H11V6H9V8H11V20ZM7 10V8H9V10H7ZM7 10V12H5V10H7ZM17 10V8H15V10H17ZM17 10V12H19V10H17Z"
    />
  </React.Fragment>
);
ArrowUp.displayName = "Icon.ArrowUp";

const DropArea = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M5 3H3V5H5V3ZM7 3H9V5H7V3ZM13 3H11V5H13V3ZM15 3H17V5H15V3ZM19 3H21V5H19V3ZM3 7H5V9H3V7ZM5 11H3V13H5V11ZM3 15H5V17H3V15ZM5 19H3V21H5V19ZM7 19H9V21H7V19ZM13 19H11V21H13V19ZM19 11H21V13H19V11ZM21 7H19V9H21V7ZM15 17V15H17H21V17H19V19H17V21H15V17ZM19 19V21H21V19H19Z"
    />
  </React.Fragment>
);
DropArea.displayName = "Icon.DropArea";

const Sort = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 20H6V8H4V6H6V4H8V6H10V8H8V20ZM10 8V10H12V8H10ZM4 8V10H2V8H4ZM18 4H16V16H14V14H12V16H14V18H16V20H18V18H20V16H22V14H20V16H18V4Z"
    />
  </React.Fragment>
);
Sort.displayName = "Icon.Sort";

const Undo = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 4H10V6H8V4ZM18 10V8H8V6H6V8H4V10H6V12H8V14H10V12H8V10H18ZM18 18V10H20V18H18ZM18 18V20H12V18H18Z"
    />
  </React.Fragment>
);
Undo.displayName = "Icon.Undo";

const CheckDouble = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M15 6H17V8H15V6ZM13 10V8H15V10H13ZM11 12V10H13V12H11ZM9 14V12H11V14H9ZM7 16V14H9V16H7ZM5 16H7V18H5V16ZM3 14H5V16H3V14ZM3 14H1V12H3V14ZM11 16H13V18H11V16ZM15 14V16H13V14H15ZM17 12V14H15V12H17ZM19 10V12H17V10H19ZM21 8H19V10H21V8ZM21 8H23V6H21V8Z"
    />
  </React.Fragment>
);
CheckDouble.displayName = "Icon.CheckDouble";

const LayoutSidebarLeft = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2 5H22V19H2V5ZM4 7V17H6V7H4ZM8 7V17H20V7H8Z"
    />
  </React.Fragment>
);
LayoutSidebarLeft.displayName = "Icon.LayoutSidebarLeft";

const Timeline = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M7 7H11V11H7V7ZM5 13V11H7V13H5ZM5 13V17H1V13H5ZM13 13H11V11H13V13ZM17 13H13V17H17V13ZM19 11V13H17V11H19ZM19 11H23V7H19V11Z"
    />
  </React.Fragment>
);
Timeline.displayName = "Icon.Timeline";

const Calendar = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M15 2H17V4H19H21V8V10V22H19H5H3V10V8V4H5H7V2H9V4H15V2ZM5 8H19V6H5V8ZM5 10V20H19V10H5Z"
    />
  </React.Fragment>
);
Calendar.displayName = "Icon.Calendar";

const ArrowLeft = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M20 11L20 13L8 13L8 15L6 15L6 13L4 13L4 11L6 11L6 9L8 9L8 11L20 11ZM10 7L8 7L8 9L10 9L10 7ZM10 7L12 7L12 5L10 5L10 7ZM10 17L8 17L8 15L10 15L10 17ZM10 17L12 17L12 19L10 19L10 17Z"
    />
  </React.Fragment>
);
ArrowLeft.displayName = "Icon.ArrowLeft";

const Cloud = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16 4H10V6H8V8H4V10H2V12H0V18H2V20H22V18H24V12H22V10H20V8H18V6H16V4ZM18 12H20H22V18H2V12H4V10H8V12H10V10H8V8H10V6H16V8H18V10V12ZM18 12V14H16V12H18Z"
    />
  </React.Fragment>
);
Cloud.displayName = "Icon.Cloud";

const Shuffle = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M18 5H16V7H18V9H12V11H10V17H2V19H10V17H12V11H18V13H16V15H18V13H20V11H22V9H20V7H18V5ZM2 9H8V11H2V9ZM22 19V17H14V19H22Z"
    />
  </React.Fragment>
);
Shuffle.displayName = "Icon.Shuffle";

const HumanHandsup = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10 2H14V6H10V2ZM7 7H17V9H15V16V22H13V16H11V22H9V16V9H7V7ZM5 5V7H7V5H5ZM5 5H3V3H5V5ZM19 5V7H17V5H19ZM19 5V3H21V5H19Z"
    />
  </React.Fragment>
);
HumanHandsup.displayName = "Icon.HumanHandsup";

const Upload = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M11 5V3.00006H13V5L15.0001 5V7L17 7V9H15V7L13 7V17.0001H11L11 7H9.00012V9H7.00012V7H9.00009V5L11 5ZM3 15.0001V19V21V21.0001L5 21.0001V21L19 21V21.0001L21 21.0001L21 21V19L21 15.0001H19V19L5 19L5 15.0001H3Z"
    />
  </React.Fragment>
);
Upload.displayName = "Icon.Upload";

const Bookmark = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M18 2H6V4H17.9995V20H15.9998V18H13.9998V16H9.99976L9.99976 18H7.99976V20H5.99976V2.00012H3.99976V22.0001H5.99976V22H7.99976V20L9.99976 20V18H13.9998V20L15.9998 20V22H17.9995V22.0001H19.9995V2.00012H18V2Z"
    />
  </React.Fragment>
);
Bookmark.displayName = "Icon.Bookmark";

const Script = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6 3H20V5H22V11H20V19H18V5H6V3ZM14 17V15H6V5H4V15H2V17V19H4V21H18V19H16V17H14ZM14 17V19H4V17H14Z"
    />
  </React.Fragment>
);
Script.displayName = "Icon.Script";

const CloudDownload = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10 4H16V6H10V4ZM8 8V6H10V8H8ZM4 10V8H8V10H4ZM2 12V10H4V12H2ZM2 18H0V12H2V18ZM2 18H7V20H2V18ZM18 8H16V6H18V8ZM22 12H20H18V10V8H20V10H22V12ZM22 18V12H24V18H22ZM22 18V20H17V18H22ZM11 20H13V18H15V16H17V14H13V9H11V14H7V16H9V18H11V20Z"
    />
  </React.Fragment>
);
CloudDownload.displayName = "Icon.CloudDownload";

const LockOpen = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M15 2H9V4H7V6H9V4H15V8H6H4V10V20V22H6H18H20V20V10V8H18H17V4H15V2ZM15 10H17H18V20H6V10H15ZM13 13H11V17H13V13Z"
    />
  </React.Fragment>
);
LockOpen.displayName = "Icon.LockOpen";

const Folder = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M4 4H12V6H20H22V8L22 18V20L20 20H4L2 20V18V6V4H4ZM20 8H10V6H4V18H20V8Z"
    />
  </React.Fragment>
);
Folder.displayName = "Icon.Folder";

const CornerDownLeft = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M18 16H8V18H6V16H4V14H6V12H8V14H18V4H20V14V16H18ZM8 12V10H10V12H8ZM8 18V20H10V18H8Z"
    />
  </React.Fragment>
);
CornerDownLeft.displayName = "Icon.CornerDownLeft";

const Minus = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <rect x="4" y="11" width="16" height="2" />
  </React.Fragment>
);
Minus.displayName = "Icon.Minus";

const DebugCheck = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M8 2H6V4H8V6H6V8V9H4V7H2V9H4V11H6V13H2V15H6V17H4V19H2V21H4V19H6V20V22H8H12V20H8V19V17V15V13V11V9V8H16V9V11V14H18V11H20V9H22V7H20V9H18V8V6H16V4H18V2H16V4H14V6H10V4H8V2ZM14 11H10V13H14V11ZM10 15H12V17H10V15ZM14 18H16V20H14V18ZM18 20V22H16V20H18ZM20 18H18V20H20V18ZM20 18V16H22V18H20Z"
    />
  </React.Fragment>
);
DebugCheck.displayName = "Icon.DebugCheck";

const ChevronLeft = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16 5L16 7L14 7L14 5L16 5ZM12 9L12 7L14 7L14 9L12 9ZM10 11L10 9L12 9L12 11L10 11ZM10 13L8 13L8 11L10 11L10 13ZM12 15L12 13L10 13L10 15L12 15ZM12 15L14 15L14 17L12 17L12 15ZM16 19L16 17L14 17L14 19L16 19Z"
    />
  </React.Fragment>
);
ChevronLeft.displayName = "Icon.ChevronLeft";

const Moon = (props: SVGProps<SVGSVGElement>) => (
  <React.Fragment>
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M6 2H14V4H12V6H10V4H6V2ZM4 6V4H6V6H4ZM4 16H2V6H4V16ZM6 18H4V16H6V18ZM8 20H6V18H8V20ZM18 20V22H8V20H18ZM20 18V20H18V18H20ZM18 14H20V18H22V10H20V12H18V14ZM12 14V16H18V14H12ZM10 12H12V14H10V12ZM10 12V6H8V12H10Z"
    />
  </React.Fragment>
);
Moon.displayName = "Icon.Moon";

PixelIcon.LayoutHeader = LayoutHeader;
PixelIcon.Search = Search;
PixelIcon.ArrowDown = ArrowDown;
PixelIcon.List = List;
PixelIcon.Debug = Debug;
PixelIcon.Downasaur = Downasaur;
PixelIcon.CornerUpRight = CornerUpRight;
PixelIcon.Hourglass = Hourglass;
PixelIcon.User = User;
PixelIcon.Alert = Alert;
PixelIcon.Sliders = Sliders;
PixelIcon.ChevronDown = ChevronDown;
PixelIcon.Logout = Logout;
PixelIcon.Crop = Crop;
PixelIcon.DropFull = DropFull;
PixelIcon.Map = Map;
PixelIcon.File = File;
PixelIcon.Duplicate = Duplicate;
PixelIcon.SunAlt = SunAlt;
PixelIcon.LayoutFooter = LayoutFooter;
PixelIcon.Pixelarticons = Pixelarticons;
PixelIcon.Contrast = Contrast;
PixelIcon.EditBox = EditBox;
PixelIcon.Move = Move;
PixelIcon.ChevronUp = ChevronUp;
PixelIcon.SlidersVertical = SlidersVertical;
PixelIcon.EyeClosed = EyeClosed;
PixelIcon.Lock = Lock;
PixelIcon.ChevronRight = ChevronRight;
PixelIcon.Clipboard = Clipboard;
PixelIcon.Link = Link;
PixelIcon.ChevronsHorizontal = ChevronsHorizontal;
PixelIcon.CornerDownRight = CornerDownRight;
PixelIcon.ArrowRight = ArrowRight;
PixelIcon.AspectRatio = AspectRatio;
PixelIcon.ChevronsVertical = ChevronsVertical;
PixelIcon.Download = Download;
PixelIcon.HumanRun = HumanRun;
PixelIcon.Expand = Expand;
PixelIcon.Note = Note;
PixelIcon.BookOpen = BookOpen;
PixelIcon.Login = Login;
PixelIcon.Collapse = Collapse;
PixelIcon.Flag = Flag;
PixelIcon.Gps = Gps;
PixelIcon.SpeedMedium = SpeedMedium;
PixelIcon.Plus = Plus;
PixelIcon.Check = Check;
PixelIcon.CornerUpLeft = CornerUpLeft;
PixelIcon.Scale = Scale;
PixelIcon.Close = Close;
PixelIcon.Reload = Reload;
PixelIcon.MissedCall = MissedCall;
PixelIcon.Message = Message;
PixelIcon.DebugOff = DebugOff;
PixelIcon.Redo = Redo;
PixelIcon.HumanHandsdown = HumanHandsdown;
PixelIcon.LayoutSidebarRight = LayoutSidebarRight;
PixelIcon.Trending = Trending;
PixelIcon.Open = Open;
PixelIcon.Dashbaord = Dashbaord;
PixelIcon.LabelAlt = LabelAlt;
PixelIcon.Delete = Delete;
PixelIcon.Clock = Clock;
PixelIcon.Human = Human;
PixelIcon.Sync = Sync;
PixelIcon.Eye = Eye;
PixelIcon.ExternalLink = ExternalLink;
PixelIcon.Zap = Zap;
PixelIcon.ArrowUp = ArrowUp;
PixelIcon.DropArea = DropArea;
PixelIcon.Sort = Sort;
PixelIcon.Undo = Undo;
PixelIcon.CheckDouble = CheckDouble;
PixelIcon.LayoutSidebarLeft = LayoutSidebarLeft;
PixelIcon.Timeline = Timeline;
PixelIcon.Calendar = Calendar;
PixelIcon.ArrowLeft = ArrowLeft;
PixelIcon.Cloud = Cloud;
PixelIcon.Shuffle = Shuffle;
PixelIcon.HumanHandsup = HumanHandsup;
PixelIcon.Upload = Upload;
PixelIcon.Bookmark = Bookmark;
PixelIcon.Script = Script;
PixelIcon.CloudDownload = CloudDownload;
PixelIcon.LockOpen = LockOpen;
PixelIcon.Folder = Folder;
PixelIcon.CornerDownLeft = CornerDownLeft;
PixelIcon.Minus = Minus;
PixelIcon.DebugCheck = DebugCheck;
PixelIcon.ChevronLeft = ChevronLeft;
PixelIcon.Moon = Moon;
